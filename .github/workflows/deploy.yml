# .github/workflows/deploy.yml
name: Deploy wingsview (artifact + releases)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_NAME: wingsview
      APP_BASE: /srv/www/wingsview
      REL: ${{ github.sha }}
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps (with dev)
        run: npm ci
        env:
          NPM_CONFIG_PRODUCTION: "false"

      - name: Build (Next standalone)
        run: npm run build

      - name: Create artifact
        run: |
          set -e
          mkdir -p package
          cp -R .next/standalone package/standalone
          cp -R .next/static package/static || true
          if [ -d public ]; then cp -R public package/public; fi
          echo "${{ github.sha }}" > package/RELEASE_SHA
          tar -C package -czf artifact.tgz .

      # ---- write SSH key to file to avoid formatting issues ----
      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          cat > key.pem <<'EOF'
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 key.pem

      - name: Sanity-check SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key_path: key.pem
          port: 22
          script: 'echo "SSH OK on $(hostname) as $(whoami)"'

      - name: Upload artifact to /tmp (MUST match activate step)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key_path: key.pem
          port: 22
          source: "artifact.tgz"
          target: "/tmp/${{ env.APP_NAME }}-${{ env.REL }}.tgz"

      - name: Activate release on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key_path: key.pem
          port: 22
          script: |
            set -euo pipefail
            APP_NAME="${{ env.APP_NAME }}"
            APP_BASE="${{ env.APP_BASE }}"
            REL="${{ env.REL }}"
            ARCHIVE="/tmp/${APP_NAME}-${REL}.tgz"
            RELEASES="${APP_BASE}/releases"
            RELDIR="${RELEASES}/${REL}"
            CURR="${APP_BASE}/current"

            echo "→ Ensure base dirs exist"
            mkdir -p "${RELEASES}" "${RELDIR}"

            echo "→ Unpack new release to ${RELDIR}"
            tar -C "${RELDIR}" -xzf "${ARCHIVE}"
            rm -f "${ARCHIVE}"

            echo "→ Normalize Next output"
            mkdir -p "${RELDIR}/.next"
            [ -d "${RELDIR}/standalone" ] && rsync -a "${RELDIR}/standalone/" "${RELDIR}/.next/standalone/" && rm -rf "${RELDIR}/standalone"
            [ -d "${RELDIR}/static" ]     && rsync -a "${RELDIR}/static/"     "${RELDIR}/.next/static/"     && rm -rf "${RELDIR}/static"
            [ -d "${RELDIR}/public" ] || mkdir -p "${RELDIR}/public"

            test -f "${RELDIR}/.next/standalone/server.js" || { echo "server.js missing"; exit 1; }

            echo "→ Point current → ${RELDIR}"
            ln -sfn "${RELDIR}" "${CURR}"

            echo "→ Reload ${APP_NAME}"
            pm2 reload "${APP_NAME}" || pm2 start "${CURR}/.next/standalone/server.js" --name "${APP_NAME}"
            pm2 save

            echo "→ Prune old releases (keep last 5)"
            cd "${RELEASES}" && ls -1t | tail -n +6 | xargs -r rm -rf --
